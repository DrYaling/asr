// This file is generated by rust-protobuf 2.25.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `msg_c_ls.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2LMsgLogin {
    // message fields
    pub account: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C2LMsgLogin {
    fn default() -> &'a C2LMsgLogin {
        <C2LMsgLogin as ::protobuf::Message>::default_instance()
    }
}

impl C2LMsgLogin {
    pub fn new() -> C2LMsgLogin {
        ::std::default::Default::default()
    }

    // string account = 1;


    pub fn get_account(&self) -> &str {
        &self.account
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::std::string::String) {
        self.account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::std::string::String {
        &mut self.account
    }

    // Take field
    pub fn take_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account, ::std::string::String::new())
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for C2LMsgLogin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account.is_empty() {
            os.write_string(1, &self.account)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C2LMsgLogin {
        C2LMsgLogin::new()
    }

    fn default_instance() -> &'static C2LMsgLogin {
        static instance: ::protobuf::rt::LazyV2<C2LMsgLogin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C2LMsgLogin::new)
    }
}

impl ::protobuf::Clear for C2LMsgLogin {
    fn clear(&mut self) {
        self.account.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for C2LMsgLogin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct L2CMsgLoginResp {
    // message fields
    pub resultflag: i32,
    pub serverip: ::std::string::String,
    pub serverport: i32,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a L2CMsgLoginResp {
    fn default() -> &'a L2CMsgLoginResp {
        <L2CMsgLoginResp as ::protobuf::Message>::default_instance()
    }
}

impl L2CMsgLoginResp {
    pub fn new() -> L2CMsgLoginResp {
        ::std::default::Default::default()
    }

    // int32 resultflag = 1;


    pub fn get_resultflag(&self) -> i32 {
        self.resultflag
    }
    pub fn clear_resultflag(&mut self) {
        self.resultflag = 0;
    }

    // Param is passed by value, moved
    pub fn set_resultflag(&mut self, v: i32) {
        self.resultflag = v;
    }

    // string serverip = 2;


    pub fn get_serverip(&self) -> &str {
        &self.serverip
    }
    pub fn clear_serverip(&mut self) {
        self.serverip.clear();
    }

    // Param is passed by value, moved
    pub fn set_serverip(&mut self, v: ::std::string::String) {
        self.serverip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serverip(&mut self) -> &mut ::std::string::String {
        &mut self.serverip
    }

    // Take field
    pub fn take_serverip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serverip, ::std::string::String::new())
    }

    // int32 serverport = 3;


    pub fn get_serverport(&self) -> i32 {
        self.serverport
    }
    pub fn clear_serverport(&mut self) {
        self.serverport = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverport(&mut self, v: i32) {
        self.serverport = v;
    }

    // string token = 4;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for L2CMsgLoginResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.resultflag = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serverip)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.serverport = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.resultflag != 0 {
            my_size += ::protobuf::rt::value_size(1, self.resultflag, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.serverip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serverip);
        }
        if self.serverport != 0 {
            my_size += ::protobuf::rt::value_size(3, self.serverport, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.resultflag != 0 {
            os.write_int32(1, self.resultflag)?;
        }
        if !self.serverip.is_empty() {
            os.write_string(2, &self.serverip)?;
        }
        if self.serverport != 0 {
            os.write_int32(3, self.serverport)?;
        }
        if !self.token.is_empty() {
            os.write_string(4, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> L2CMsgLoginResp {
        L2CMsgLoginResp::new()
    }

    fn default_instance() -> &'static L2CMsgLoginResp {
        static instance: ::protobuf::rt::LazyV2<L2CMsgLoginResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(L2CMsgLoginResp::new)
    }
}

impl ::protobuf::Clear for L2CMsgLoginResp {
    fn clear(&mut self) {
        self.resultflag = 0;
        self.serverip.clear();
        self.serverport = 0;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for L2CMsgLoginResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EMsgIdC2Ls {
    CLs_Msg_None = 0,
    CLs_Msg_Login = 1,
}

impl ::protobuf::ProtobufEnum for EMsgIdC2Ls {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMsgIdC2Ls> {
        match value {
            0 => ::std::option::Option::Some(EMsgIdC2Ls::CLs_Msg_None),
            1 => ::std::option::Option::Some(EMsgIdC2Ls::CLs_Msg_Login),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EMsgIdC2Ls] = &[
            EMsgIdC2Ls::CLs_Msg_None,
            EMsgIdC2Ls::CLs_Msg_Login,
        ];
        values
    }
}

impl ::std::marker::Copy for EMsgIdC2Ls {
}

impl ::std::default::Default for EMsgIdC2Ls {
    fn default() -> Self {
        EMsgIdC2Ls::CLs_Msg_None
    }
}

impl ::protobuf::reflect::ProtobufValue for EMsgIdC2Ls {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum L2CRetResult {
    RR_PWD_ERROR = 0,
    RR_NO_SERVER = 1,
    RR_SERVER_BUSY = 2,
    RR_SERVER_NOT_WELL = 3,
    RR_NO_RESPONSE = 4,
    RR_SUCCESS = 5,
}

impl ::protobuf::ProtobufEnum for L2CRetResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<L2CRetResult> {
        match value {
            0 => ::std::option::Option::Some(L2CRetResult::RR_PWD_ERROR),
            1 => ::std::option::Option::Some(L2CRetResult::RR_NO_SERVER),
            2 => ::std::option::Option::Some(L2CRetResult::RR_SERVER_BUSY),
            3 => ::std::option::Option::Some(L2CRetResult::RR_SERVER_NOT_WELL),
            4 => ::std::option::Option::Some(L2CRetResult::RR_NO_RESPONSE),
            5 => ::std::option::Option::Some(L2CRetResult::RR_SUCCESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [L2CRetResult] = &[
            L2CRetResult::RR_PWD_ERROR,
            L2CRetResult::RR_NO_SERVER,
            L2CRetResult::RR_SERVER_BUSY,
            L2CRetResult::RR_SERVER_NOT_WELL,
            L2CRetResult::RR_NO_RESPONSE,
            L2CRetResult::RR_SUCCESS,
        ];
        values
    }
}

impl ::std::marker::Copy for L2CRetResult {
}

impl ::std::default::Default for L2CRetResult {
    fn default() -> Self {
        L2CRetResult::RR_PWD_ERROR
    }
}

impl ::protobuf::reflect::ProtobufValue for L2CRetResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
