// This file is generated by rust-protobuf 2.25.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `msg_c_ps.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2PMsgLogin {
    // message fields
    pub account: ::std::string::String,
    pub access_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C2PMsgLogin {
    fn default() -> &'a C2PMsgLogin {
        <C2PMsgLogin as ::protobuf::Message>::default_instance()
    }
}

impl C2PMsgLogin {
    pub fn new() -> C2PMsgLogin {
        ::std::default::Default::default()
    }

    // string account = 1;


    pub fn get_account(&self) -> &str {
        &self.account
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::std::string::String) {
        self.account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::std::string::String {
        &mut self.account
    }

    // Take field
    pub fn take_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account, ::std::string::String::new())
    }

    // string access_token = 2;


    pub fn get_access_token(&self) -> &str {
        &self.access_token
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        &mut self.access_token
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for C2PMsgLogin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account);
        }
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.access_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account.is_empty() {
            os.write_string(1, &self.account)?;
        }
        if !self.access_token.is_empty() {
            os.write_string(2, &self.access_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C2PMsgLogin {
        C2PMsgLogin::new()
    }

    fn default_instance() -> &'static C2PMsgLogin {
        static instance: ::protobuf::rt::LazyV2<C2PMsgLogin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C2PMsgLogin::new)
    }
}

impl ::protobuf::Clear for C2PMsgLogin {
    fn clear(&mut self) {
        self.account.clear();
        self.access_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for C2PMsgLogin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct P2cMsgLoginCharacter {
    // message fields
    pub uuid: u64,
    pub role_id: u32,
    pub own_type: i32,
    pub state: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P2cMsgLoginCharacter {
    fn default() -> &'a P2cMsgLoginCharacter {
        <P2cMsgLoginCharacter as ::protobuf::Message>::default_instance()
    }
}

impl P2cMsgLoginCharacter {
    pub fn new() -> P2cMsgLoginCharacter {
        ::std::default::Default::default()
    }

    // uint64 uuid = 1;


    pub fn get_uuid(&self) -> u64 {
        self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid = 0;
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: u64) {
        self.uuid = v;
    }

    // uint32 role_id = 2;


    pub fn get_role_id(&self) -> u32 {
        self.role_id
    }
    pub fn clear_role_id(&mut self) {
        self.role_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_role_id(&mut self, v: u32) {
        self.role_id = v;
    }

    // int32 own_type = 3;


    pub fn get_own_type(&self) -> i32 {
        self.own_type
    }
    pub fn clear_own_type(&mut self) {
        self.own_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_own_type(&mut self, v: i32) {
        self.own_type = v;
    }

    // int32 state = 4;


    pub fn get_state(&self) -> i32 {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = 0;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: i32) {
        self.state = v;
    }
}

impl ::protobuf::Message for P2cMsgLoginCharacter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.uuid = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.role_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.own_type = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.state = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.uuid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.uuid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.role_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.role_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.own_type != 0 {
            my_size += ::protobuf::rt::value_size(3, self.own_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::value_size(4, self.state, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.uuid != 0 {
            os.write_uint64(1, self.uuid)?;
        }
        if self.role_id != 0 {
            os.write_uint32(2, self.role_id)?;
        }
        if self.own_type != 0 {
            os.write_int32(3, self.own_type)?;
        }
        if self.state != 0 {
            os.write_int32(4, self.state)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P2cMsgLoginCharacter {
        P2cMsgLoginCharacter::new()
    }

    fn default_instance() -> &'static P2cMsgLoginCharacter {
        static instance: ::protobuf::rt::LazyV2<P2cMsgLoginCharacter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P2cMsgLoginCharacter::new)
    }
}

impl ::protobuf::Clear for P2cMsgLoginCharacter {
    fn clear(&mut self) {
        self.uuid = 0;
        self.role_id = 0;
        self.own_type = 0;
        self.state = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for P2cMsgLoginCharacter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct P2CMsgLoginResp {
    // message fields
    pub result: ELoginRetResp,
    pub playerId: u64,
    pub characters: ::protobuf::RepeatedField<P2cMsgLoginCharacter>,
    pub item_info: ::protobuf::RepeatedField<ItemInfo>,
    pub gm_authority: u32,
    pub account: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P2CMsgLoginResp {
    fn default() -> &'a P2CMsgLoginResp {
        <P2CMsgLoginResp as ::protobuf::Message>::default_instance()
    }
}

impl P2CMsgLoginResp {
    pub fn new() -> P2CMsgLoginResp {
        ::std::default::Default::default()
    }

    // .ProtoMsg.ELoginRetResp result = 1;


    pub fn get_result(&self) -> ELoginRetResp {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ELoginRetResp::RR_ERROR;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ELoginRetResp) {
        self.result = v;
    }

    // uint64 playerId = 2;


    pub fn get_playerId(&self) -> u64 {
        self.playerId
    }
    pub fn clear_playerId(&mut self) {
        self.playerId = 0;
    }

    // Param is passed by value, moved
    pub fn set_playerId(&mut self, v: u64) {
        self.playerId = v;
    }

    // repeated .ProtoMsg.P2cMsgLoginCharacter characters = 3;


    pub fn get_characters(&self) -> &[P2cMsgLoginCharacter] {
        &self.characters
    }
    pub fn clear_characters(&mut self) {
        self.characters.clear();
    }

    // Param is passed by value, moved
    pub fn set_characters(&mut self, v: ::protobuf::RepeatedField<P2cMsgLoginCharacter>) {
        self.characters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_characters(&mut self) -> &mut ::protobuf::RepeatedField<P2cMsgLoginCharacter> {
        &mut self.characters
    }

    // Take field
    pub fn take_characters(&mut self) -> ::protobuf::RepeatedField<P2cMsgLoginCharacter> {
        ::std::mem::replace(&mut self.characters, ::protobuf::RepeatedField::new())
    }

    // repeated .ProtoMsg.ItemInfo item_info = 4;


    pub fn get_item_info(&self) -> &[ItemInfo] {
        &self.item_info
    }
    pub fn clear_item_info(&mut self) {
        self.item_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_item_info(&mut self, v: ::protobuf::RepeatedField<ItemInfo>) {
        self.item_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_item_info(&mut self) -> &mut ::protobuf::RepeatedField<ItemInfo> {
        &mut self.item_info
    }

    // Take field
    pub fn take_item_info(&mut self) -> ::protobuf::RepeatedField<ItemInfo> {
        ::std::mem::replace(&mut self.item_info, ::protobuf::RepeatedField::new())
    }

    // uint32 gm_authority = 5;


    pub fn get_gm_authority(&self) -> u32 {
        self.gm_authority
    }
    pub fn clear_gm_authority(&mut self) {
        self.gm_authority = 0;
    }

    // Param is passed by value, moved
    pub fn set_gm_authority(&mut self, v: u32) {
        self.gm_authority = v;
    }

    // string account = 6;


    pub fn get_account(&self) -> &str {
        &self.account
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::std::string::String) {
        self.account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::std::string::String {
        &mut self.account
    }

    // Take field
    pub fn take_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account, ::std::string::String::new())
    }
}

impl ::protobuf::Message for P2CMsgLoginResp {
    fn is_initialized(&self) -> bool {
        for v in &self.characters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.item_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.playerId = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.characters)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.item_info)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gm_authority = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ELoginRetResp::RR_ERROR {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if self.playerId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.playerId, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.characters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.item_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.gm_authority != 0 {
            my_size += ::protobuf::rt::value_size(5, self.gm_authority, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.account.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.account);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ELoginRetResp::RR_ERROR {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if self.playerId != 0 {
            os.write_uint64(2, self.playerId)?;
        }
        for v in &self.characters {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.item_info {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.gm_authority != 0 {
            os.write_uint32(5, self.gm_authority)?;
        }
        if !self.account.is_empty() {
            os.write_string(6, &self.account)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P2CMsgLoginResp {
        P2CMsgLoginResp::new()
    }

    fn default_instance() -> &'static P2CMsgLoginResp {
        static instance: ::protobuf::rt::LazyV2<P2CMsgLoginResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P2CMsgLoginResp::new)
    }
}

impl ::protobuf::Clear for P2CMsgLoginResp {
    fn clear(&mut self) {
        self.result = ELoginRetResp::RR_ERROR;
        self.playerId = 0;
        self.characters.clear();
        self.item_info.clear();
        self.gm_authority = 0;
        self.account.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for P2CMsgLoginResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct P2CMsgKickOff {
    // message fields
    pub reason: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P2CMsgKickOff {
    fn default() -> &'a P2CMsgKickOff {
        <P2CMsgKickOff as ::protobuf::Message>::default_instance()
    }
}

impl P2CMsgKickOff {
    pub fn new() -> P2CMsgKickOff {
        ::std::default::Default::default()
    }

    // int32 reason = 1;


    pub fn get_reason(&self) -> i32 {
        self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason = 0;
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: i32) {
        self.reason = v;
    }
}

impl ::protobuf::Message for P2CMsgKickOff {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.reason = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reason != 0 {
            my_size += ::protobuf::rt::value_size(1, self.reason, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.reason != 0 {
            os.write_int32(1, self.reason)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P2CMsgKickOff {
        P2CMsgKickOff::new()
    }

    fn default_instance() -> &'static P2CMsgKickOff {
        static instance: ::protobuf::rt::LazyV2<P2CMsgKickOff> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P2CMsgKickOff::new)
    }
}

impl ::protobuf::Clear for P2CMsgKickOff {
    fn clear(&mut self) {
        self.reason = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for P2CMsgKickOff {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2PMsgLoginSuccess {
    // message fields
    pub cost_time: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C2PMsgLoginSuccess {
    fn default() -> &'a C2PMsgLoginSuccess {
        <C2PMsgLoginSuccess as ::protobuf::Message>::default_instance()
    }
}

impl C2PMsgLoginSuccess {
    pub fn new() -> C2PMsgLoginSuccess {
        ::std::default::Default::default()
    }

    // int32 cost_time = 1;


    pub fn get_cost_time(&self) -> i32 {
        self.cost_time
    }
    pub fn clear_cost_time(&mut self) {
        self.cost_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_cost_time(&mut self, v: i32) {
        self.cost_time = v;
    }
}

impl ::protobuf::Message for C2PMsgLoginSuccess {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cost_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cost_time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cost_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cost_time != 0 {
            os.write_int32(1, self.cost_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C2PMsgLoginSuccess {
        C2PMsgLoginSuccess::new()
    }

    fn default_instance() -> &'static C2PMsgLoginSuccess {
        static instance: ::protobuf::rt::LazyV2<C2PMsgLoginSuccess> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C2PMsgLoginSuccess::new)
    }
}

impl ::protobuf::Clear for C2PMsgLoginSuccess {
    fn clear(&mut self) {
        self.cost_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for C2PMsgLoginSuccess {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2PMsgCreateExploreReq {
    // message fields
    pub explore_id: u32,
    pub characters: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C2PMsgCreateExploreReq {
    fn default() -> &'a C2PMsgCreateExploreReq {
        <C2PMsgCreateExploreReq as ::protobuf::Message>::default_instance()
    }
}

impl C2PMsgCreateExploreReq {
    pub fn new() -> C2PMsgCreateExploreReq {
        ::std::default::Default::default()
    }

    // uint32 explore_id = 1;


    pub fn get_explore_id(&self) -> u32 {
        self.explore_id
    }
    pub fn clear_explore_id(&mut self) {
        self.explore_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_explore_id(&mut self, v: u32) {
        self.explore_id = v;
    }

    // repeated uint32 characters = 2;


    pub fn get_characters(&self) -> &[u32] {
        &self.characters
    }
    pub fn clear_characters(&mut self) {
        self.characters.clear();
    }

    // Param is passed by value, moved
    pub fn set_characters(&mut self, v: ::std::vec::Vec<u32>) {
        self.characters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_characters(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.characters
    }

    // Take field
    pub fn take_characters(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.characters, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for C2PMsgCreateExploreReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.explore_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.characters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.explore_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.explore_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.characters {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.explore_id != 0 {
            os.write_uint32(1, self.explore_id)?;
        }
        for v in &self.characters {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C2PMsgCreateExploreReq {
        C2PMsgCreateExploreReq::new()
    }

    fn default_instance() -> &'static C2PMsgCreateExploreReq {
        static instance: ::protobuf::rt::LazyV2<C2PMsgCreateExploreReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(C2PMsgCreateExploreReq::new)
    }
}

impl ::protobuf::Clear for C2PMsgCreateExploreReq {
    fn clear(&mut self) {
        self.explore_id = 0;
        self.characters.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for C2PMsgCreateExploreReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct P2CMsgCreateExploreResp {
    // message fields
    pub result: CreateExploreReqResult,
    pub access_token: ::std::string::String,
    pub explore_uuid: u64,
    pub server_ip: ::std::string::String,
    pub server_port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P2CMsgCreateExploreResp {
    fn default() -> &'a P2CMsgCreateExploreResp {
        <P2CMsgCreateExploreResp as ::protobuf::Message>::default_instance()
    }
}

impl P2CMsgCreateExploreResp {
    pub fn new() -> P2CMsgCreateExploreResp {
        ::std::default::Default::default()
    }

    // .ProtoMsg.CreateExploreReqResult result = 1;


    pub fn get_result(&self) -> CreateExploreReqResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = CreateExploreReqResult::SUCCESS;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: CreateExploreReqResult) {
        self.result = v;
    }

    // string access_token = 2;


    pub fn get_access_token(&self) -> &str {
        &self.access_token
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        &mut self.access_token
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token, ::std::string::String::new())
    }

    // uint64 explore_uuid = 3;


    pub fn get_explore_uuid(&self) -> u64 {
        self.explore_uuid
    }
    pub fn clear_explore_uuid(&mut self) {
        self.explore_uuid = 0;
    }

    // Param is passed by value, moved
    pub fn set_explore_uuid(&mut self, v: u64) {
        self.explore_uuid = v;
    }

    // string server_ip = 4;


    pub fn get_server_ip(&self) -> &str {
        &self.server_ip
    }
    pub fn clear_server_ip(&mut self) {
        self.server_ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_ip(&mut self, v: ::std::string::String) {
        self.server_ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_ip(&mut self) -> &mut ::std::string::String {
        &mut self.server_ip
    }

    // Take field
    pub fn take_server_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_ip, ::std::string::String::new())
    }

    // int32 server_port = 5;


    pub fn get_server_port(&self) -> i32 {
        self.server_port
    }
    pub fn clear_server_port(&mut self) {
        self.server_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_server_port(&mut self, v: i32) {
        self.server_port = v;
    }
}

impl ::protobuf::Message for P2CMsgCreateExploreResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.explore_uuid = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_ip)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.server_port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != CreateExploreReqResult::SUCCESS {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.access_token);
        }
        if self.explore_uuid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.explore_uuid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.server_ip.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.server_ip);
        }
        if self.server_port != 0 {
            my_size += ::protobuf::rt::value_size(5, self.server_port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != CreateExploreReqResult::SUCCESS {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if !self.access_token.is_empty() {
            os.write_string(2, &self.access_token)?;
        }
        if self.explore_uuid != 0 {
            os.write_uint64(3, self.explore_uuid)?;
        }
        if !self.server_ip.is_empty() {
            os.write_string(4, &self.server_ip)?;
        }
        if self.server_port != 0 {
            os.write_int32(5, self.server_port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P2CMsgCreateExploreResp {
        P2CMsgCreateExploreResp::new()
    }

    fn default_instance() -> &'static P2CMsgCreateExploreResp {
        static instance: ::protobuf::rt::LazyV2<P2CMsgCreateExploreResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P2CMsgCreateExploreResp::new)
    }
}

impl ::protobuf::Clear for P2CMsgCreateExploreResp {
    fn clear(&mut self) {
        self.result = CreateExploreReqResult::SUCCESS;
        self.access_token.clear();
        self.explore_uuid = 0;
        self.server_ip.clear();
        self.server_port = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for P2CMsgCreateExploreResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ItemInfo {
    // message fields
    pub item_id: u32,
    pub count: i32,
    pub time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ItemInfo {
    fn default() -> &'a ItemInfo {
        <ItemInfo as ::protobuf::Message>::default_instance()
    }
}

impl ItemInfo {
    pub fn new() -> ItemInfo {
        ::std::default::Default::default()
    }

    // uint32 item_id = 1;


    pub fn get_item_id(&self) -> u32 {
        self.item_id
    }
    pub fn clear_item_id(&mut self) {
        self.item_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_item_id(&mut self, v: u32) {
        self.item_id = v;
    }

    // sint32 count = 2;


    pub fn get_count(&self) -> i32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = v;
    }

    // int64 time = 3;


    pub fn get_time(&self) -> i64 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = v;
    }
}

impl ::protobuf::Message for ItemInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.item_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.count = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.item_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.item_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.count);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.item_id != 0 {
            os.write_uint32(1, self.item_id)?;
        }
        if self.count != 0 {
            os.write_sint32(2, self.count)?;
        }
        if self.time != 0 {
            os.write_int64(3, self.time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ItemInfo {
        ItemInfo::new()
    }

    fn default_instance() -> &'static ItemInfo {
        static instance: ::protobuf::rt::LazyV2<ItemInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ItemInfo::new)
    }
}

impl ::protobuf::Clear for ItemInfo {
    fn clear(&mut self) {
        self.item_id = 0;
        self.count = 0;
        self.time = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ELoginRetResp {
    RR_ERROR = 0,
    RR_SERVER_BUSY = 1,
    RR_SUCCESS = 2,
}

impl ::protobuf::ProtobufEnum for ELoginRetResp {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELoginRetResp> {
        match value {
            0 => ::std::option::Option::Some(ELoginRetResp::RR_ERROR),
            1 => ::std::option::Option::Some(ELoginRetResp::RR_SERVER_BUSY),
            2 => ::std::option::Option::Some(ELoginRetResp::RR_SUCCESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ELoginRetResp] = &[
            ELoginRetResp::RR_ERROR,
            ELoginRetResp::RR_SERVER_BUSY,
            ELoginRetResp::RR_SUCCESS,
        ];
        values
    }
}

impl ::std::marker::Copy for ELoginRetResp {
}

impl ::std::default::Default for ELoginRetResp {
    fn default() -> Self {
        ELoginRetResp::RR_ERROR
    }
}

impl ::protobuf::reflect::ProtobufValue for ELoginRetResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CreateExploreReqResult {
    SUCCESS = 0,
    FAIL = 1,
    EXPLORE_UNFINISHED = 2,
}

impl ::protobuf::ProtobufEnum for CreateExploreReqResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CreateExploreReqResult> {
        match value {
            0 => ::std::option::Option::Some(CreateExploreReqResult::SUCCESS),
            1 => ::std::option::Option::Some(CreateExploreReqResult::FAIL),
            2 => ::std::option::Option::Some(CreateExploreReqResult::EXPLORE_UNFINISHED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CreateExploreReqResult] = &[
            CreateExploreReqResult::SUCCESS,
            CreateExploreReqResult::FAIL,
            CreateExploreReqResult::EXPLORE_UNFINISHED,
        ];
        values
    }
}

impl ::std::marker::Copy for CreateExploreReqResult {
}

impl ::std::default::Default for CreateExploreReqResult {
    fn default() -> Self {
        CreateExploreReqResult::SUCCESS
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateExploreReqResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
