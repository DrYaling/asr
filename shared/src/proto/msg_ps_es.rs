// This file is generated by rust-protobuf 2.25.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `msg_ps_es.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Ps2EsMsgExploreReq {
    // message fields
    pub player_id: u64,
    pub explore_id: u32,
    pub plat_server_id: u32,
    pub characters: ::std::vec::Vec<u32>,
    pub item_infos: ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo>,
    pub gm_authority: u32,
    pub tasks_id: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ps2EsMsgExploreReq {
    fn default() -> &'a Ps2EsMsgExploreReq {
        <Ps2EsMsgExploreReq as ::protobuf::Message>::default_instance()
    }
}

impl Ps2EsMsgExploreReq {
    pub fn new() -> Ps2EsMsgExploreReq {
        ::std::default::Default::default()
    }

    // uint64 player_id = 1;


    pub fn get_player_id(&self) -> u64 {
        self.player_id
    }
    pub fn clear_player_id(&mut self) {
        self.player_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: u64) {
        self.player_id = v;
    }

    // uint32 explore_id = 2;


    pub fn get_explore_id(&self) -> u32 {
        self.explore_id
    }
    pub fn clear_explore_id(&mut self) {
        self.explore_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_explore_id(&mut self, v: u32) {
        self.explore_id = v;
    }

    // uint32 plat_server_id = 3;


    pub fn get_plat_server_id(&self) -> u32 {
        self.plat_server_id
    }
    pub fn clear_plat_server_id(&mut self) {
        self.plat_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_plat_server_id(&mut self, v: u32) {
        self.plat_server_id = v;
    }

    // repeated uint32 characters = 4;


    pub fn get_characters(&self) -> &[u32] {
        &self.characters
    }
    pub fn clear_characters(&mut self) {
        self.characters.clear();
    }

    // Param is passed by value, moved
    pub fn set_characters(&mut self, v: ::std::vec::Vec<u32>) {
        self.characters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_characters(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.characters
    }

    // Take field
    pub fn take_characters(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.characters, ::std::vec::Vec::new())
    }

    // repeated .ProtoMsg.ExploreItemInfo item_infos = 5;


    pub fn get_item_infos(&self) -> &[super::msg_c_es::ExploreItemInfo] {
        &self.item_infos
    }
    pub fn clear_item_infos(&mut self) {
        self.item_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_item_infos(&mut self, v: ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo>) {
        self.item_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_item_infos(&mut self) -> &mut ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo> {
        &mut self.item_infos
    }

    // Take field
    pub fn take_item_infos(&mut self) -> ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo> {
        ::std::mem::replace(&mut self.item_infos, ::protobuf::RepeatedField::new())
    }

    // uint32 gm_authority = 6;


    pub fn get_gm_authority(&self) -> u32 {
        self.gm_authority
    }
    pub fn clear_gm_authority(&mut self) {
        self.gm_authority = 0;
    }

    // Param is passed by value, moved
    pub fn set_gm_authority(&mut self, v: u32) {
        self.gm_authority = v;
    }

    // repeated uint32 tasks_id = 7;


    pub fn get_tasks_id(&self) -> &[u32] {
        &self.tasks_id
    }
    pub fn clear_tasks_id(&mut self) {
        self.tasks_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tasks_id(&mut self, v: ::std::vec::Vec<u32>) {
        self.tasks_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tasks_id(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.tasks_id
    }

    // Take field
    pub fn take_tasks_id(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.tasks_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Ps2EsMsgExploreReq {
    fn is_initialized(&self) -> bool {
        for v in &self.item_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.player_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.explore_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.plat_server_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.characters)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.item_infos)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gm_authority = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.tasks_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.player_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.player_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.explore_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.explore_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.plat_server_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.plat_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.characters {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.item_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.gm_authority != 0 {
            my_size += ::protobuf::rt::value_size(6, self.gm_authority, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tasks_id {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.player_id != 0 {
            os.write_uint64(1, self.player_id)?;
        }
        if self.explore_id != 0 {
            os.write_uint32(2, self.explore_id)?;
        }
        if self.plat_server_id != 0 {
            os.write_uint32(3, self.plat_server_id)?;
        }
        for v in &self.characters {
            os.write_uint32(4, *v)?;
        };
        for v in &self.item_infos {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.gm_authority != 0 {
            os.write_uint32(6, self.gm_authority)?;
        }
        for v in &self.tasks_id {
            os.write_uint32(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ps2EsMsgExploreReq {
        Ps2EsMsgExploreReq::new()
    }

    fn default_instance() -> &'static Ps2EsMsgExploreReq {
        static instance: ::protobuf::rt::LazyV2<Ps2EsMsgExploreReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ps2EsMsgExploreReq::new)
    }
}

impl ::protobuf::Clear for Ps2EsMsgExploreReq {
    fn clear(&mut self) {
        self.player_id = 0;
        self.explore_id = 0;
        self.plat_server_id = 0;
        self.characters.clear();
        self.item_infos.clear();
        self.gm_authority = 0;
        self.tasks_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Ps2EsMsgExploreReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Es2PsMsgExploreResp {
    // message fields
    pub result: ExploreCreateResult,
    pub access_token: ::std::string::String,
    pub explore_uuid: u64,
    pub player_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Es2PsMsgExploreResp {
    fn default() -> &'a Es2PsMsgExploreResp {
        <Es2PsMsgExploreResp as ::protobuf::Message>::default_instance()
    }
}

impl Es2PsMsgExploreResp {
    pub fn new() -> Es2PsMsgExploreResp {
        ::std::default::Default::default()
    }

    // .ProtoMsg.ExploreCreateResult result = 1;


    pub fn get_result(&self) -> ExploreCreateResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ExploreCreateResult::SUCCESS;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ExploreCreateResult) {
        self.result = v;
    }

    // string access_token = 2;


    pub fn get_access_token(&self) -> &str {
        &self.access_token
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        &mut self.access_token
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token, ::std::string::String::new())
    }

    // uint64 explore_uuid = 3;


    pub fn get_explore_uuid(&self) -> u64 {
        self.explore_uuid
    }
    pub fn clear_explore_uuid(&mut self) {
        self.explore_uuid = 0;
    }

    // Param is passed by value, moved
    pub fn set_explore_uuid(&mut self, v: u64) {
        self.explore_uuid = v;
    }

    // uint64 player_id = 4;


    pub fn get_player_id(&self) -> u64 {
        self.player_id
    }
    pub fn clear_player_id(&mut self) {
        self.player_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: u64) {
        self.player_id = v;
    }
}

impl ::protobuf::Message for Es2PsMsgExploreResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.explore_uuid = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.player_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ExploreCreateResult::SUCCESS {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.access_token);
        }
        if self.explore_uuid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.explore_uuid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.player_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.player_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ExploreCreateResult::SUCCESS {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if !self.access_token.is_empty() {
            os.write_string(2, &self.access_token)?;
        }
        if self.explore_uuid != 0 {
            os.write_uint64(3, self.explore_uuid)?;
        }
        if self.player_id != 0 {
            os.write_uint64(4, self.player_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Es2PsMsgExploreResp {
        Es2PsMsgExploreResp::new()
    }

    fn default_instance() -> &'static Es2PsMsgExploreResp {
        static instance: ::protobuf::rt::LazyV2<Es2PsMsgExploreResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Es2PsMsgExploreResp::new)
    }
}

impl ::protobuf::Clear for Es2PsMsgExploreResp {
    fn clear(&mut self) {
        self.result = ExploreCreateResult::SUCCESS;
        self.access_token.clear();
        self.explore_uuid = 0;
        self.player_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Es2PsMsgExploreResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Es2PsMsgExploreResult {
    // message fields
    pub explore_uuid: u64,
    pub result: super::msg_c_es::ExploreResult,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Es2PsMsgExploreResult {
    fn default() -> &'a Es2PsMsgExploreResult {
        <Es2PsMsgExploreResult as ::protobuf::Message>::default_instance()
    }
}

impl Es2PsMsgExploreResult {
    pub fn new() -> Es2PsMsgExploreResult {
        ::std::default::Default::default()
    }

    // uint64 explore_uuid = 1;


    pub fn get_explore_uuid(&self) -> u64 {
        self.explore_uuid
    }
    pub fn clear_explore_uuid(&mut self) {
        self.explore_uuid = 0;
    }

    // Param is passed by value, moved
    pub fn set_explore_uuid(&mut self, v: u64) {
        self.explore_uuid = v;
    }

    // .ProtoMsg.ExploreResult result = 2;


    pub fn get_result(&self) -> super::msg_c_es::ExploreResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = super::msg_c_es::ExploreResult::FINISHED;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: super::msg_c_es::ExploreResult) {
        self.result = v;
    }
}

impl ::protobuf::Message for Es2PsMsgExploreResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.explore_uuid = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.explore_uuid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.explore_uuid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.result != super::msg_c_es::ExploreResult::FINISHED {
            my_size += ::protobuf::rt::enum_size(2, self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.explore_uuid != 0 {
            os.write_uint64(1, self.explore_uuid)?;
        }
        if self.result != super::msg_c_es::ExploreResult::FINISHED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Es2PsMsgExploreResult {
        Es2PsMsgExploreResult::new()
    }

    fn default_instance() -> &'static Es2PsMsgExploreResult {
        static instance: ::protobuf::rt::LazyV2<Es2PsMsgExploreResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Es2PsMsgExploreResult::new)
    }
}

impl ::protobuf::Clear for Es2PsMsgExploreResult {
    fn clear(&mut self) {
        self.explore_uuid = 0;
        self.result = super::msg_c_es::ExploreResult::FINISHED;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Es2PsMsgExploreResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Es2PsMsgFightSuccessReq {
    // message fields
    pub fight_id: i32,
    pub player_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Es2PsMsgFightSuccessReq {
    fn default() -> &'a Es2PsMsgFightSuccessReq {
        <Es2PsMsgFightSuccessReq as ::protobuf::Message>::default_instance()
    }
}

impl Es2PsMsgFightSuccessReq {
    pub fn new() -> Es2PsMsgFightSuccessReq {
        ::std::default::Default::default()
    }

    // int32 fight_id = 1;


    pub fn get_fight_id(&self) -> i32 {
        self.fight_id
    }
    pub fn clear_fight_id(&mut self) {
        self.fight_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_fight_id(&mut self, v: i32) {
        self.fight_id = v;
    }

    // uint64 player_id = 2;


    pub fn get_player_id(&self) -> u64 {
        self.player_id
    }
    pub fn clear_player_id(&mut self) {
        self.player_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: u64) {
        self.player_id = v;
    }
}

impl ::protobuf::Message for Es2PsMsgFightSuccessReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fight_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.player_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fight_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fight_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.player_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.player_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fight_id != 0 {
            os.write_int32(1, self.fight_id)?;
        }
        if self.player_id != 0 {
            os.write_uint64(2, self.player_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Es2PsMsgFightSuccessReq {
        Es2PsMsgFightSuccessReq::new()
    }

    fn default_instance() -> &'static Es2PsMsgFightSuccessReq {
        static instance: ::protobuf::rt::LazyV2<Es2PsMsgFightSuccessReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Es2PsMsgFightSuccessReq::new)
    }
}

impl ::protobuf::Clear for Es2PsMsgFightSuccessReq {
    fn clear(&mut self) {
        self.fight_id = 0;
        self.player_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Es2PsMsgFightSuccessReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Ps2EsMsgFightSucessResp {
    // message fields
    pub result: ExploreCreateResult,
    pub item_infos: ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo>,
    pub exp: ::protobuf::RepeatedField<super::msg_common::CharacterExp>,
    pub player_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ps2EsMsgFightSucessResp {
    fn default() -> &'a Ps2EsMsgFightSucessResp {
        <Ps2EsMsgFightSucessResp as ::protobuf::Message>::default_instance()
    }
}

impl Ps2EsMsgFightSucessResp {
    pub fn new() -> Ps2EsMsgFightSucessResp {
        ::std::default::Default::default()
    }

    // .ProtoMsg.ExploreCreateResult result = 1;


    pub fn get_result(&self) -> ExploreCreateResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ExploreCreateResult::SUCCESS;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ExploreCreateResult) {
        self.result = v;
    }

    // repeated .ProtoMsg.ExploreItemInfo item_infos = 2;


    pub fn get_item_infos(&self) -> &[super::msg_c_es::ExploreItemInfo] {
        &self.item_infos
    }
    pub fn clear_item_infos(&mut self) {
        self.item_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_item_infos(&mut self, v: ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo>) {
        self.item_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_item_infos(&mut self) -> &mut ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo> {
        &mut self.item_infos
    }

    // Take field
    pub fn take_item_infos(&mut self) -> ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo> {
        ::std::mem::replace(&mut self.item_infos, ::protobuf::RepeatedField::new())
    }

    // repeated .ProtoMsg.Common.CharacterExp exp = 3;


    pub fn get_exp(&self) -> &[super::msg_common::CharacterExp] {
        &self.exp
    }
    pub fn clear_exp(&mut self) {
        self.exp.clear();
    }

    // Param is passed by value, moved
    pub fn set_exp(&mut self, v: ::protobuf::RepeatedField<super::msg_common::CharacterExp>) {
        self.exp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exp(&mut self) -> &mut ::protobuf::RepeatedField<super::msg_common::CharacterExp> {
        &mut self.exp
    }

    // Take field
    pub fn take_exp(&mut self) -> ::protobuf::RepeatedField<super::msg_common::CharacterExp> {
        ::std::mem::replace(&mut self.exp, ::protobuf::RepeatedField::new())
    }

    // uint64 player_id = 4;


    pub fn get_player_id(&self) -> u64 {
        self.player_id
    }
    pub fn clear_player_id(&mut self) {
        self.player_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: u64) {
        self.player_id = v;
    }
}

impl ::protobuf::Message for Ps2EsMsgFightSucessResp {
    fn is_initialized(&self) -> bool {
        for v in &self.item_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.exp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.item_infos)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.exp)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.player_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ExploreCreateResult::SUCCESS {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        for value in &self.item_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.exp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.player_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.player_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ExploreCreateResult::SUCCESS {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        for v in &self.item_infos {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.exp {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.player_id != 0 {
            os.write_uint64(4, self.player_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ps2EsMsgFightSucessResp {
        Ps2EsMsgFightSucessResp::new()
    }

    fn default_instance() -> &'static Ps2EsMsgFightSucessResp {
        static instance: ::protobuf::rt::LazyV2<Ps2EsMsgFightSucessResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ps2EsMsgFightSucessResp::new)
    }
}

impl ::protobuf::Clear for Ps2EsMsgFightSucessResp {
    fn clear(&mut self) {
        self.result = ExploreCreateResult::SUCCESS;
        self.item_infos.clear();
        self.exp.clear();
        self.player_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Ps2EsMsgFightSucessResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Es2PsMsgExploreEndSync {
    // message fields
    pub result: super::msg_c_es::ExploreResult,
    pub package: ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo>,
    pub player_id: u64,
    pub tasks_id: ::std::vec::Vec<u32>,
    pub finished_targets: ::std::vec::Vec<u32>,
    pub failed_targets: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Es2PsMsgExploreEndSync {
    fn default() -> &'a Es2PsMsgExploreEndSync {
        <Es2PsMsgExploreEndSync as ::protobuf::Message>::default_instance()
    }
}

impl Es2PsMsgExploreEndSync {
    pub fn new() -> Es2PsMsgExploreEndSync {
        ::std::default::Default::default()
    }

    // .ProtoMsg.ExploreResult result = 1;


    pub fn get_result(&self) -> super::msg_c_es::ExploreResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = super::msg_c_es::ExploreResult::FINISHED;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: super::msg_c_es::ExploreResult) {
        self.result = v;
    }

    // repeated .ProtoMsg.ExploreItemInfo package = 2;


    pub fn get_package(&self) -> &[super::msg_c_es::ExploreItemInfo] {
        &self.package
    }
    pub fn clear_package(&mut self) {
        self.package.clear();
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo>) {
        self.package = v;
    }

    // Mutable pointer to the field.
    pub fn mut_package(&mut self) -> &mut ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo> {
        &mut self.package
    }

    // Take field
    pub fn take_package(&mut self) -> ::protobuf::RepeatedField<super::msg_c_es::ExploreItemInfo> {
        ::std::mem::replace(&mut self.package, ::protobuf::RepeatedField::new())
    }

    // uint64 player_id = 3;


    pub fn get_player_id(&self) -> u64 {
        self.player_id
    }
    pub fn clear_player_id(&mut self) {
        self.player_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: u64) {
        self.player_id = v;
    }

    // repeated uint32 tasks_id = 4;


    pub fn get_tasks_id(&self) -> &[u32] {
        &self.tasks_id
    }
    pub fn clear_tasks_id(&mut self) {
        self.tasks_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tasks_id(&mut self, v: ::std::vec::Vec<u32>) {
        self.tasks_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tasks_id(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.tasks_id
    }

    // Take field
    pub fn take_tasks_id(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.tasks_id, ::std::vec::Vec::new())
    }

    // repeated uint32 finished_targets = 5;


    pub fn get_finished_targets(&self) -> &[u32] {
        &self.finished_targets
    }
    pub fn clear_finished_targets(&mut self) {
        self.finished_targets.clear();
    }

    // Param is passed by value, moved
    pub fn set_finished_targets(&mut self, v: ::std::vec::Vec<u32>) {
        self.finished_targets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_finished_targets(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.finished_targets
    }

    // Take field
    pub fn take_finished_targets(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.finished_targets, ::std::vec::Vec::new())
    }

    // repeated uint32 failed_targets = 6;


    pub fn get_failed_targets(&self) -> &[u32] {
        &self.failed_targets
    }
    pub fn clear_failed_targets(&mut self) {
        self.failed_targets.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_targets(&mut self, v: ::std::vec::Vec<u32>) {
        self.failed_targets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_targets(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.failed_targets
    }

    // Take field
    pub fn take_failed_targets(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.failed_targets, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Es2PsMsgExploreEndSync {
    fn is_initialized(&self) -> bool {
        for v in &self.package {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.package)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.player_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.tasks_id)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.finished_targets)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.failed_targets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != super::msg_c_es::ExploreResult::FINISHED {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        for value in &self.package {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.player_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.player_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tasks_id {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.finished_targets {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.failed_targets {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != super::msg_c_es::ExploreResult::FINISHED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        for v in &self.package {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.player_id != 0 {
            os.write_uint64(3, self.player_id)?;
        }
        for v in &self.tasks_id {
            os.write_uint32(4, *v)?;
        };
        for v in &self.finished_targets {
            os.write_uint32(5, *v)?;
        };
        for v in &self.failed_targets {
            os.write_uint32(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Es2PsMsgExploreEndSync {
        Es2PsMsgExploreEndSync::new()
    }

    fn default_instance() -> &'static Es2PsMsgExploreEndSync {
        static instance: ::protobuf::rt::LazyV2<Es2PsMsgExploreEndSync> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Es2PsMsgExploreEndSync::new)
    }
}

impl ::protobuf::Clear for Es2PsMsgExploreEndSync {
    fn clear(&mut self) {
        self.result = super::msg_c_es::ExploreResult::FINISHED;
        self.package.clear();
        self.player_id = 0;
        self.tasks_id.clear();
        self.finished_targets.clear();
        self.failed_targets.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Es2PsMsgExploreEndSync {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ExploreCreateResult {
    SUCCESS = 0,
    FAIL = 1,
}

impl ::protobuf::ProtobufEnum for ExploreCreateResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExploreCreateResult> {
        match value {
            0 => ::std::option::Option::Some(ExploreCreateResult::SUCCESS),
            1 => ::std::option::Option::Some(ExploreCreateResult::FAIL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ExploreCreateResult] = &[
            ExploreCreateResult::SUCCESS,
            ExploreCreateResult::FAIL,
        ];
        values
    }
}

impl ::std::marker::Copy for ExploreCreateResult {
}

impl ::std::default::Default for ExploreCreateResult {
    fn default() -> Self {
        ExploreCreateResult::SUCCESS
    }
}

impl ::protobuf::reflect::ProtobufValue for ExploreCreateResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
